DATA SEGMENT
    NUM DB ?
    FACT DB 1H
    RES DB 10 DUP ('$')
    MSG1 DB "ENTER NUMBER : $"
    MSG2 DB 10,13,"RESULT : $"
DATA ENDS
CODE SEGMENT
        ASSUME DS:DATA,CS:CODE
START:       
    MOV AX,DATA
    MOV DS,AX
   
    LEA DX,MSG1
    MOV AH,9
    INT 21H
   
    MOV AH,1    ; read character from input device
    INT 21H
    SUB AL,30H   ; to get BCD form from ASCII
    MOV NUM,AL
   
    MOV AH,0     ; clear any garbage value in ah 
    MOV AL,FACT  ; move variable num in al
    MOV CH,0     ; clear any garbage valu in vh
    MOV CL,NUM   ; move num in cl
     
LABEL1: MUL CL   ; multiply cl and ax(which value is present)
    LOOP LABEL1   
               
    LEA SI,RES   ;used to initialize RES to SI register and Call 
                 
    CALL HEX2DEC ;Procedure HEX2DEC which will covert AX register 
                 ;value as result and Print it on user screen.
      
    LEA DX,MSG2
    MOV AH,9
    INT 21H
      
    LEA DX,RES  ;LEA DX,RES in this LEA stands for LOAD EFFECTIVE 
                ;ADDRESS and it loads the effective address of 
                ;second element into the first element. 
    MOV AH,9
    INT 21H
            
    MOV AH,4CH
    INT 21H        
CODE ENDS  
HEX2DEC PROC NEAR
    MOV CX,0   ;MOV CX,0 is used to move or assign value 0 
               ;(decimal value) to  CX. The program which we are 
               ;wishing to write is to covert HexaDecimal value to 
               ;Decimal value, In which we will divide the number
               ;till the Quotient is going to be Zero. CX register 
               ;( CX is also Called COUNTER). CX register will 
               ;count the number digit generated by dividing the 
               ;Hexadecimal number by Base value of Decimal 
               ;i.e.Ten. MOV BX,10 in this Base value 10 is moved 
               ;to BX register, So that it is used to divide hexa 
               ;number by 10.
    MOV BX,10
   
LOOP1: MOV DX,0 ; clear any garbage value in dx to store loop value
       DIV BX
       ADD DL,30H ;DIV instruction only works with REG or MEMORY 
                  ;hence we cannot use DIV 10 where 10 is immediate,
                  ;So we have to move 10 to BX register (we can take
                  ;any register) this we have already done above 
                  ;and Then DIV BX  Now DIV BX will Divide AX 
                  ;register with 10 which is passed to BX register
                  ;and Result of division is present in AX register
                  ;contains Quotientand DX register contains 
                  ;Remainder. Here we will not touch Quotient AX as
                  ;it will be used for furture Division, But DX 
                  ;Remainder will be Decimal Digit and will always 
                  ;be less than Ten so the value will be in DL 
                  ;register only and to make it printable on Console
                  ;(Screen) we have to add  30H So that it will 
                  ;become a ASCII character and will be saved in 
                  ;Charater Array and will be printed as String 
                  ;later So ADD DL,30H. 
                  
                  
       PUSH DX    ;PUSH is a stack function. Stack is an area of memory
                  ;for keeping temporary data. PUSH and POP are 
                  ;two stack operations which stores or gets 16
                  ;bits of data. PUSH DX stores 16 bit data inside
                  ;DX register into Stack Area. INC is a instruction 
                  ;for Increment the present in Register or Memory.
                  ;INC CX will increment the value present in CX 
                  ;register by One. Here we are using CX register 
                  ;as a counter and counting the numbers of digits
                  ;in their ASCII form which are pushed into Stack.
                  ;So that the same count will help to POP the 
                  ;values out of Stack.
       INC CX
       CMP AX,9   ;CMP AX,9  is used to compare AX register with 9
                  ;and jump if AX is greater to the respective 
                  ;LABEL LOOP1.
       JG LOOP1
     
       ADD AL,30H  ;ADD AL,30H The Last Remainder will be Decimal 
                   ;Digit in AX register
       MOV [SI],AL ;MOV [SI],AL Saving the Characters in Character 
                   ;Array (i.e. String) is done by Moving AL 
                   ;register to Address of SI register which is 
                   ;represented in Square Brackets i.e. [SI]. SI 
                   ;is assigned with the Character Array i.e. RES.
     
LOOP2: POP AX     ;POP AX gets 16 bit data to AX register from 
                  ;Top of Stack.
       INC SI     ;INC SI will increment the value present in SI
                  ; register by One.
       MOV [SI],AL ;MOV [SI],AL Saving the Characters in Character 
                   ;Array (i.e. String) is done by Moving AL 
                   ;register to Address of SI register
       LOOP LOOP2
       RET
HEX2DEC ENDP           
   
END START
